name: Build and Push Docker Image

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions: 
  contents: read
  pull-requests: write

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint mypy black isort
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
        
    - name: Lint with pylint
      run: |
        pylint --disable=all --enable=unused-import,unused-variable src/ --exit-zero
        
    - name: Type checking with mypy
      run: |
        mypy --ignore-missing-imports src/
        
    - name: Check code formatting with black
      run: |
        black --check src/ || echo "Code formatting issues found, please run black on your code"
        
    - name: Check import order with isort
      run: |
        isort --check-only --profile black src/ || echo "Import order issues found, please run isort on your code"

  dast-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Start local application for testing
      run: |
        python -m pip install gunicorn
        cd src && gunicorn -b 127.0.0.1:5000 app:app -D
        sleep 5
        
    - name: ZAP Scan
      uses: zaproxy/action-baseline@v0.14.0
      with:
        docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
        target: 'http://127.0.0.1:5000'
        cmd_options: '-a'
        fail_action: false
        artifact_name: "zap-scan-report"
        allow_issue_writing: false
        
    - name: Upload ZAP Scan Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: zap-scan-results
        path: |
          report.html
          report.md
          report.json
        retention-days: 30

  dependency-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'Python Web App'
        path: '.'
        format: 'HTML'
        out: 'reports'
        
    - name: Upload OWASP Dependency Check Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-check-report
        path: reports/
        
    - name: Scan Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety
        pip freeze > requirements-lock.txt
        safety check -r requirements-lock.txt --output json > safety-report.json || true
        
    - name: Upload Safety Check Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-check-report
        path: safety-report.json
        retention-days: 30

  build-and-push:
    needs: [static-analysis, dast-security, dependency-analysis]
    runs-on: ubuntu-latest
    environment: prod
    env:
      ARTIFACT_REGISTRY: ${{ vars.ARTIFACT_REGISTRY }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    # Remplacer les étapes d'authentification par celles du workflow de référence
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: |
          image=moby/buildkit:latest
          network=host
          
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker for GCP Artifact Registry
      run: |
        gcloud auth configure-docker europe-west1-docker.pkg.dev --quiet
        
    - name: Build and Push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ env.ARTIFACT_REGISTRY }}/python-web-app:${{ github.sha }}
        provenance: false

    - name: Test Docker image
      run: |
        docker pull ${{ env.ARTIFACT_REGISTRY }}/python-web-app:${{ github.sha }} || echo "Failed to pull image, but continuing..."
        docker run --name test-container -d -p 5000:5000 ${{ env.ARTIFACT_REGISTRY }}/python-web-app:${{ github.sha }} || echo "Failed to run container, but continuing..."
        sleep 5
        curl http://localhost:5000 || echo "Failed to access application, but continuing..."
        docker stop test-container || true
